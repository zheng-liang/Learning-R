---
title: "Binary Classification Using Logistic Regression Models"
output:
html_document:
toc: true
toc_float: true
code_folding: hide
---
knitr::knit_hooks$set(purl = knitr::hook_purl)
# Use install.packages("packagename") if the packages are not installed in R
library(car)
library(caret) # For building ML models
library(corrplot) # For correlation plot
library(tidyverse) # For ggplot and dplyr packages
library(mlbench) # For data sets
library(lmtest) # For statistical tests
library(glmnet) # For LASSO logistic regression
data("PimaIndiansDiabetes")
str(PimaIndiansDiabetes)
summary(PimaIndiansDiabetes)
stargazer::stargazer(str(PimaIndiansDiabetes))
stargazer::stargazer(PimaIndiansDiabetes)
stargazer::stargazer(PimaIndiansDiabetes, type = "text")
stargazer::stargazer(summary(PimaIndiansDiabetes), type = "text")
kable(summary(PimaIndiansDiabetes))
library(knitr)
library(kableExtra)
library(broom)
kable(summary(PimaIndiansDiabetes))
kable(summary(PimaIndiansDiabetes), format = "pipe")
head(PimaIndiansDiabetes, n = 4)
tail(PimaIndiansDiabetes, n = 4)
kable(head(PimaIndiansDiabetes))
kable(head(PimaIndiansDiabetes), "pipe")
stargazer::stargazer(rbind(head(PimaIndiansDiabetes), tail(PimaIndiansDiabetes)), type = "text")
stargazer::stargazer(rbind(head(PimaIndiansDiabetes), tail(PimaIndiansDiabetes)), type = "text", summary = F)
stargazer::stargazer(rbind(head(PimaIndiansDiabetes), tail(PimaIndiansDiabetes)),
type = "text",
title = "First and Last 6 Observations in PimaIndiansDiabetes Dataset"
summary = F)
stargazer::stargazer(rbind(head(PimaIndiansDiabetes), tail(PimaIndiansDiabetes)),
type = "text",
title = "First and Last 6 Observations in PimaIndiansDiabetes Dataset",
summary = F)
data <- PimaIndiansDiabetes %>%
dplyr::filter(glucose != 0 & pressure != 0 & triceps != 0 & mass != 0)
summary(data)
response <- subset(data, select = c(diabetes))
explvar <- subset(data, select = -c(diabetes))
summary(response)
summary(explvar)
data %>% filter(insulin == 0)
data %>% filter(insulin == 0) %>% summarise(n)
data %>% filter(insulin == 0) %>% summarise(count(n))
data %>% filter(insulin == 0) %>% summarise(count())
data %>% filter(insulin == 0) %>% summarise(nrow())
data %>% filter(insulin == 0) %>% nrow()
data %>% filter(insulin == 0) %>% group_by(diabetes) %>%nrow()
data %>% filter(insulin == 0) %>% group_by(diabetes)
data %>% group_by(diabetes) %>% filter(insulin == 0) %>% summarise(n = n())
data %>% filter(insulin == 0) %>% summarise(n = n())
ggplot(data = response) +
geom_bar(aes(x = diabetes, fill = diabetes)) +
ggtitle("Distribution of Outcomes from Diabetes Test") +
xlab("Diabetes") + ylab("Frequency") +
theme(plot.title = element_text(hjust = 0.5))
par(mfrow = c(1, 4), mar = c(1, 3, 2, 1))
for (i in 1:4) {
boxplot(explvar[,i], main = names(explvar)[i])
}
for (i in 5:8) {
boxplot(explvar[,i], main = names(explvar)[i])
}
par(mfrow = c(1, 4), mar = c(2, 3, 2, 1))
for (i in 1:4) {
hist(explvar[,i], main = names(explvar)[i])
}
for (i in 5:8) {
hist(explvar[,i], main = names(explvar)[i])
}
store_test <- list()
for (i in 1:8) {
store_test <- cbind(store_test,
shapiro.test(x = explvar[,i]))
}
store_test["data.name",] <- names(explvar)
store_test
store_test["p.value",] > 0.05
corrX <- cor(x = explvar, method = "spearman")
corrplot(corr = corrX,
method = "color",
addCoef.col = "black",
title = "Correlation Between Explanatory Variables",
mar = c(0, 0, 1, 0))
# Full model
model1 <- glm(diabetes == "pos" ~ ., #indicate "pos" so that it is 1 and "neg" is 0
data = data,
family = binomial(link = "logit"))
summary(model1)
stargazer::stargazer(model1)
stargazer::stargazer(model1, type = "text")
stargazer::stargazer(model1,
type = "text", title = "Logit Regression Output for Full Model")
# Restricted model
model2 <- glm(diabetes == "pos" ~ pregnant + glucose + mass + pedigree,
data = data,
family = binomial(link = "logit"))
stargazer::stargazer(model2,
type = "text",
title = "Logit Regression Output for Restricted Model")
lmtest::lrtest(model2, model1)
stargazer::stargazer(lmtest::lrtest(model2, model1), type = "text")
stargazer::stargazer(lmtest::lrtest(model2, model1), type = "text", summary = F)
summary(lmtest::lrtest(model2, model1))
car::vif(model2)
prob.model2 <- fitted.values(model2)
head(prob.model2)
pred <- names(coef(model2)[-1]) # Exclude intercept
plotdata <- subset(data, select = pred) # Only keep the variables used in the model
plotdata <- plotdata %>%
mutate(logit = log(prob.model2/(1-prob.model2))) %>% # Bind logit to plotdata
gather(key = "pred", value = "pred.value", -logit)
ggplot(data = plotdata, aes(x = logit, y = pred.value)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess") +
facet_wrap(. ~ pred, scales = "free")
model3 <- glm(diabetes == "pos" ~ pregnant + glucose + mass + log(pedigree),
data = data,
family = binomial(link = "logit"))
stargazer::stargazer(model3,
type = "text",
title = "Logit Regression Output for Model With Transformed Variable")
prob.model3 <- fitted.values(model3)
logit = log(prob.model3/(1-prob.model3))
plotdata2 <- subset(data, select = pred)
plotdata2 <- plotdata2 %>%
mutate(l.pedigree = log(pedigree))
ggplot(data = plotdata2, aes(x = logit, y = l.pedigree)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess")
plot(model3, which = 4)
head(sort(cooks.distance(model3), decreasing = T))
std.resid <- rstandard(model3)
val <- abs(std.resid) > 3
table(val)["TRUE"] # Returned NA because there are no TRUE logical values
car::outlierTest(model3)
prob.model1 <- fitted.values(model1) #can also use predict(model1, type="response")
prediction.model1 <- as.factor(ifelse(prob.model1 > 0.5, "pos", "neg"))
confusionMatrix(data$diabetes,
prediction.model1,
dnn = c("Actual", "Predicted"))
prediction.model2 <- as.factor(ifelse(prob.model2 > 0.5, "pos", "neg"))
confusionMatrix(data$diabetes,
prediction.model2,
dnn = c("Actual", "Predicted"))
prediction.model3 <- as.factor(ifelse(prob.model3 > 0.5, "pos", "neg"))
confusionMatrix(data$diabetes,
prediction.model3,
dnn = c("Actual", "Predicted"))
library(ROCR)
prediction.model2 <- as.factor(ifelse(prob.model2 > 0.5, "pos", "neg"))
confusionMatrix(data$diabetes,
prediction.model2,
dnn = c("Actual", "Predicted"))
prediction.model1 <- as.factor(ifelse(prob.model1 > 0.5, "pos", "neg"))
confusionMatrix(data$diabetes,
prediction.model1,
dnn = c("Actual", "Predicted"))
confusionMatrix(data$diabetes,
prediction.model2,
dnn = c("Actual", "Predicted"), positive = "pos")
confusionMatrix(data$diabetes,
prediction.model2,
dnn = c("Actual", "Predicted"))
confusionMatrix(data$diabetes,
prediction.model2,
dnn = c("Actual", "Predicted"), positive = "pos")
confusionMatrix(data$diabetes,
prediction.model2,
dnn = c("Actual", "Predicted"),
positive = "pos", mode = "everything")
confusionMatrix(data$diabetes,
prediction.model2,
dnn = c("Actual", "Predicted"),
positive = "pos")
, mode = "everything"
confusionMatrix(data$diabetes,
prediction.model2,
dnn = c("Actual", "Predicted"),
positive = "pos", mode = "everything")
confusionMatrix(data = prediction.model1,
reference = data$diabetes,
dnn = c("Predicted", "Actual"),
positive = "pos", mode = "everything")
prediction.model2 <- as.factor(ifelse(prob.model2 > 0.5, "pos", "neg"))
confusionMatrix(data = prediction.model2,
reference = data$diabetes,
dnn = c("Predicted", "Actual"),
positive = "pos", mode = "everything")
prediction.model3 <- as.factor(ifelse(prob.model3 > 0.5, "pos", "neg"))
confusionMatrix(data = prediction.model3,
reference = data$diabetes,
dnn = c("Predicted", "Actual"),
positive = "pos", mode = "everything")
